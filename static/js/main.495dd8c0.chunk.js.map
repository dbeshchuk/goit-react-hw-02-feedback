{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","option","onLeaveFeedback","map","value","onClick","Notification","message","App","state","increaseValue","e","setState","prevState","target","dataset","console","log","this","Math","round","valueKeys","Object","keys","countTotalFeedback","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAgBeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAU,YAAnB,UACE,6BAAKF,IACJC,MCgBQE,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKN,UAAU,kBAAf,UACE,uCAAUE,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCYSC,EAnBS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,gBACjC,OACE,oBAAIT,UAAU,gBAAd,SACGQ,EAAOE,KAAI,SAACC,GAAD,OACV,6BACE,wBAAQC,QAASH,EAAiB,aAAYE,EAA9C,SACGA,KAFIA,SCIFE,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCiEEC,E,4MA7DbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,cAAgB,SAACC,GACf,EAAKC,UAAS,SAACC,GAAD,sBACXF,EAAEG,OAAOC,QAAQX,MAAQS,EAAUF,EAAEG,OAAOC,QAAQX,OAAS,MAGhEY,QAAQC,IAAIN,EAAEG,OAAOC,QAAQX,Q,wDAG/B,WACE,OAAOc,KAAKT,MAAMd,KAAOuB,KAAKT,MAAMb,QAAUsB,KAAKT,MAAMZ,M,6CAG3D,WACE,OAAOsB,KAAKC,MACTF,KAAKT,MAAMd,MACTuB,KAAKT,MAAMd,KAAOuB,KAAKT,MAAMb,QAAUsB,KAAKT,MAAMZ,KACnD,O,oBAIN,WACE,MAA+BqB,KAAKT,MAA5Bd,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBwB,EAAYC,OAAOC,KAAKL,KAAKT,OAEnC,OACE,qCACE,qBAAKhB,UAAU,YAAf,SACE,4CAGF,cAAC,EAAD,CAASF,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEU,OAAQoB,EACRnB,gBAAiBgB,KAAKR,kBAI1B,cAAC,EAAD,CAASnB,MAAO,cAAhB,SACG2B,KAAKM,qBACJ,cAAC,EAAD,CACE7B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,KAAKM,qBACZzB,mBAAoBmB,KAAKO,oCAG3B,cAAC,EAAD,CAAclB,QAAQ,+B,GAtDhBmB,aCKHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.495dd8c0.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className=\"container\">\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div className=\"statistics-list\">\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ option, onLeaveFeedback }) => {\n  return (\n    <ul className=\"feedback-list\">\n      {option.map((value) => (\n        <li key={value}>\n          <button onClick={onLeaveFeedback} data-value={value}>\n            {value}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/Section\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  increaseValue = (e) => {\n    this.setState((prevState) => ({\n      [e.target.dataset.value]: prevState[e.target.dataset.value] + 1,\n    }));\n\n    console.log(e.target.dataset.value);\n  };\n\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.round(\n      (this.state.good /\n        (this.state.good + this.state.neutral + this.state.bad)) *\n        100\n    );\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const valueKeys = Object.keys(this.state);\n\n    return (\n      <>\n        <div className=\"container\">\n          <h1>Feedback</h1>\n        </div>\n\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            option={valueKeys}\n            onLeaveFeedback={this.increaseValue}\n          />\n        </Section>\n\n        <Section title={\"Statistics:\"}>\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}